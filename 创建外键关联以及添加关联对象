from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship,sessionmaker
import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column,Integer,String


engine = create_engine("mysql+pymysql://root:123456@192.168.10.22/code",encoding='utf-8',echo=True)
base = declarative_base()

class User(base):
    __tablename__ = 'user' #定义表名
    id = Column(Integer,primary_key=True) #primary_key指定主键
    name = Column(String(32))
    password = Column(String(64))

class Address(base):
    __tablename__ = 'address'
    id = Column(Integer,primary_key=True)
    email_address = Column(String(32),nullable=False)
    user_id = Column(Integer,ForeignKey('user.id'))

    user = relationship("User",backref="address")  #反向查找address表中的关联项

    def __repr__(self):
        return "<address(id='%s',email_address='%s',user_id='%s'>"% (self.id,self.email_address,self.user_id)


base.metadata.create_all(engine)
session_class = sessionmaker(bind=engine)
session = session_class()

添加对象
# add_obj = Address(id=1,email_address='test@qq.com',user_id=1)
# session.add(add_obj)
# session.commit()

#查询
# obj = session.query(User).first()
# for i in obj.address:
#     print(i)
#
# address_obj = session.query(Address).first()
# print(address_obj.user.name)

#添加关联对象
# obj = session.query(User).filter(User.name=='vfast').all()[0]
# print(obj.address)

# obj.address = [Address(email_address="v1@qq.com"),Address(email_address="v2@qq.com"),Address(email_address="test@qq.com")]
#
# session.commit()

#批量修改属性值
obj = session.query(Address).filter(Address.id.in_([1,2,3])).all()
for i in obj:
    i.user_id = 1
session.commit()

